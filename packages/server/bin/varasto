#!/usr/bin/env node

const { createFileSystemStorage } = require('@varasto/fs-storage');
const express = require('express');
const morgan = require('morgan');
const yargs = require('yargs');

const { createServer } = require('../dist');

const argv = yargs.usage(
  '$0 [options] <directory>',
  'Start the HTTP server.',
  (yargs) =>
    yargs
      .options({
        a: {
          alias: 'auth',
          nargs: 1,
          describe: "Username and password to require, separated with ':'.",
          type: 'string',
        },
        h: {
          alias: 'host',
          nargs: 1,
          default: '0.0.0.0',
          describe: 'Hostname which to bind to.',
          type: 'string',
        },
        p: {
          alias: 'port',
          nargs: 1,
          default: 3000,
          describe: 'Port which to listen to.',
          type: 'number',
        },
      })
      .positional('directory', {
        describe: 'Directory where the items will be persisted into.',
        type: 'string',
        demand: true,
      })
      .help('help')
).argv;

const createServerOptions = () => {
  const options = {};

  if (argv.auth) {
    const [username, password] = argv.auth.split(':');

    options.auth = { username, password };
  }

  return options;
};

const storage = createFileSystemStorage({ dir: argv.directory });
const server = express();
const { host, port } = argv;

server.use(morgan('combined'));
server.use(createServer(storage, createServerOptions()));

server.on('error', (err) => {
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  if (err.syscall !== 'listen') {
    throw err;
  }

  // Handle specific listen errors with user friendly messages.
  switch (err.code) {
    case 'EACCES':
      process.stderr.write(`${bind} requires elevated privileges`);
      process.exit(1);
      break;

    case 'EADDRINUSE':
      process.stderr.write(`${bind} is already in use`);
      process.exit(1);
      break;

    default:
      throw err;
  }
});

server.listen(port, host, () => {
  process.stdout.write(`Varasto is listening on http://${host}:${port}\n`);
});
